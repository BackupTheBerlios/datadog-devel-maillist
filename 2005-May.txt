From adq_dvb at lidskialf.net  Mon May  2 17:31:09 2005
From: adq_dvb at lidskialf.net (Andrew de Quincey)
Date: Mon, 2 May 2005 16:31:09 +0100
Subject: [Datadog-devel] completion of StreamsViewer
Message-ID: <200505021631.09374.adq_dvb@lidskialf.net>

Hi, the StreamsViewer is mostly completed now. I've just implemented editing 
of substreams, so you can change their colours etc etc.

Next up, we need to think about the StreamResourceManager/TaskManager as 
mentioned in the wiki - we have to do those before we can move on to any more 
complicated stream analysis/display functions.



From adq_dvb at lidskialf.net  Wed May  4 10:43:39 2005
From: adq_dvb at lidskialf.net (Andrew de Quincey)
Date: Wed, 4 May 2005 09:43:39 +0100
Subject: [Datadog-devel] StreamResourceManager
Message-ID: <200505040943.39419.adq_dvb@lidskialf.net>

Hi, here are my thoughts on this component.

This does not have a UI - it is purely for managing the resources associated 
with a stream.

I suggest a tree-oriented collection of resources on the filing system. At the 
root of the tree is a directory. This will contain the resources for a 
physical stream on disk. The name of this directory will be some suitable 
unique value. There will either be a file mapping from absolute pathname -> 
name of the resource directory, or perhaps a filename in each resource 
directory giving these details.

The resources themselves will be identified by a textual resourceid, and 
stored in seperate files (e.g. PCR_times, continuity_errors).

Logical substreams of a physical stream will be represented as subdirectories. 
The abstract resource structure as above can then be used for the 
substreams... and sub-sub-streams and so on.

The resource manager will have to remember the modification time of the 
physical stream so that the directory can be cleared if it is modified. The 
same goes for removing defunct stream data, or clearing disk space when asked 
by the user.

The tree structure can also be used in-memory to provide a straight forward 
method of accessing stream resources 
(e.g. /<substreamid>/<subsubstreamid>/<resourceid>)

Locking of resourceids will have to be performed to prevent problems with 
simultaneous access.

The user must be able to choose where these resource directories will be, as 
they are likely to be quite large (e.g. they will very likely contain 
demultiexpled audio/video streams etc etc).


